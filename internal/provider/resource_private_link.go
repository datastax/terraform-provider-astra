package provider

import (
	"context"
	"errors"
	"fmt"
	"strings"

	"github.com/datastax/astra-client-go/v2/astra"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
)

func resourcePrivateLink() *schema.Resource {
	return &schema.Resource{
		Description: "`astra_private_link` provides a private link resource. Private Link is a private network endpoint that can be created to connect from your vpc to Astra without using a publicly routable IP address. `astra_private_link` resources are associated with a database id. Once the private_link resource is created in Astra it must be linked to an endpoint within your vpc, use `astra_private_link_endpoint` to do this.",
		CreateContext: resourcePrivateLinkCreate,
		ReadContext:   resourcePrivateLinkRead,
		DeleteContext: resourcePrivateLinkDelete,

		Importer: &schema.ResourceImporter{
			StateContext: schema.ImportStatePassthroughContext,
		},

		Schema: map[string]*schema.Schema{
			// Required
			"allowed_principals": {
				Description:      "List of service principals to apply to the Private Link (i.e. arn:aws:iam::123456789012:role/admin).",
				Type:             schema.TypeList,
				Required:         true,
				ForceNew:         true,
				Elem: &schema.Schema{
					Type: schema.TypeString,
				},
			},
			"database_id": {
				Description:  "Astra database where private link will be enabled.",
				Type:         schema.TypeString,
				Required:     true,
				ForceNew:     true,
				ValidateFunc: validation.IsUUID,
			},
			"datacenter_id": {
				Description:  "Astra datacenter in the region where the private link will be created.",
				Type:         schema.TypeString,
				Required:     true,
				ForceNew:     true,
			},
			"service_name": {
				Description:  "Name of the endpoint service for private link generated by the cloud provider.",
				Type:         schema.TypeString,
				Computed:     true,
			},
		},
	}
}

func resourcePrivateLinkCreate(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	client := meta.(*astra.ClientWithResponses)

	databaseID := d.Get("database_id").(string)
	datacenterID := d.Get("datacenter_id").(string)
	allowedPrincipalsInterface := d.Get("allowed_principals").([]interface{})

	allowedPrincipals := astra.AllowedPrincipals{}
	for i := 0; i < len(allowedPrincipalsInterface); i++ {
		apString := allowedPrincipalsInterface[i].(string)
		allowedPrincipals = append(allowedPrincipals, apString)
	}

	resp, err := client.AddAllowedPrincipalToServiceWithResponse(ctx,
		databaseID,
		datacenterID,
		astra.AddAllowedPrincipalToServiceJSONRequestBody{
			AllowedPrincipals: &allowedPrincipals,
		},
	)

	if err != nil {
		return diag.FromErr(err)
	} else if resp.StatusCode() >= 400 {
		return diag.Errorf("error adding private link to database: %s", string(resp.Body))
	}

	pl := resp.JSON200

	var serviceName = string(*pl.ServiceName)

	if err := setPrivateLinkData(d, databaseID, datacenterID, serviceName); err != nil {
		return diag.FromErr(err)
	}

	return nil
}

func resourcePrivateLinkDelete(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	//TODO when endpoint exists
	return nil
}
func resourcePrivateLinkRead(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	client := meta.(*astra.ClientWithResponses)

	id := d.Id()

	databaseID, datacenterID, serviceName, err := parsePrivateLinkID(id)
	if err != nil {
		return diag.FromErr(err)
	}

	privateLinks, err := listPrivateLinks(ctx, client, databaseID, datacenterID)
	if err != nil {
		return diag.FromErr(err)
	}

	if string(*privateLinks.ServiceName) == serviceName {
		if err := setPrivateLinkData(d, databaseID, datacenterID, serviceName); err != nil {
			return diag.FromErr(err)
		}
		return nil
	}

	// Private Link not found. Remove from state.
	d.SetId("")

	return nil
}

func setPrivateLinkData(d *schema.ResourceData, databaseID string, datacenterID string, serviceName string) error {
	d.SetId(fmt.Sprintf("%s/datacenter/%s/serviceNames/%s", databaseID, datacenterID, serviceName))

	if err := d.Set("database_id", databaseID); err != nil {
		return err
	}
	if err := d.Set("datacenter_id", datacenterID); err != nil {
		return err
	}
	if err := d.Set("service_name", serviceName); err != nil {
		return err
	}

	return nil
}

func parsePrivateLinkID(id string) (string, string, string, error) {
	idParts := strings.Split(strings.ToLower(id), "/")
	if len(idParts) != 5 {
		return "", "", "", errors.New("invalid private link id format: expected datacenter/servicenames")
	}
	return idParts[0], idParts[2], idParts[4], nil
}
